
ğŸ“Œ NAJCZÄ˜ÅšCIEJ UÅ»YWANE FRAGMENTY KODU W JAVIE (do kolosa i nie tylko)

-------------------------------------------------
ğŸ”¹ 1. Czytanie pliku linia po linii
-------------------------------------------------
try (BufferedReader reader = new BufferedReader(new FileReader("plik.csv"))) {
    String line;
    while ((line = reader.readLine()) != null) {
        // Przetwarzanie jednej linii
        System.out.println(line);
    }
} catch (IOException e) {
    e.printStackTrace();
}

-------------------------------------------------
ğŸ”¹ 2. Parsowanie liczby z tekstu
-------------------------------------------------
int liczba = Integer.parseInt("123"); // UWAGA: moÅ¼e rzuciÄ‡ NumberFormatException

-------------------------------------------------
ğŸ”¹ 3. Rozdzielanie danych z CSV
-------------------------------------------------
String linia = "J12	120	3	5	7";
String[] dane = linia.split("\t"); // Tabulator jako separator

-------------------------------------------------
ğŸ”¹ 4. Definicja klasy z getterem i konstruktorem
-------------------------------------------------
public class Osoba {
    private String imie;

    public Osoba(String imie) {
        this.imie = imie;
    }

    public String getImie() {
        return imie;
    }
}

-------------------------------------------------
ğŸ”¹ 5. UÅ¼ycie ArrayList i dodawanie elementÃ³w
-------------------------------------------------
List<String> lista = new ArrayList<>();
lista.add("element");
System.out.println(lista.get(0)); // WyÅ›wietla "element"

-------------------------------------------------
ğŸ”¹ 6. Sortowanie listy po wÅ‚asnym kryterium
-------------------------------------------------
lista.sort((a, b) -> a.compareTo(b)); // lub np. porÃ³wnanie liczby zgonÃ³w

-------------------------------------------------
ğŸ”¹ 7. Sprawdzanie wzorca (regex)
-------------------------------------------------
if (kod.matches("^[A-Z][0-9]{2}.*$")) {
    System.out.println("Poprawny kod ICD-10");
}

-------------------------------------------------
ğŸ”¹ 8. WÅ‚asna klasa z toString()
-------------------------------------------------
@Override
public String toString() {
    return "Kod: " + this.kod;
}

-------------------------------------------------
ğŸ”¹ 9. ObsÅ‚uga wyjÄ…tkÃ³w
-------------------------------------------------
try {
    // Kod mogÄ…cy rzuciÄ‡ wyjÄ…tek
} catch (Exception e) {
    e.printStackTrace(); // lub: System.out.println(e.getMessage());
}

-------------------------------------------------
ğŸ”¹ 10. Wczytywanie danych z konsoli (Scanner)
-------------------------------------------------
Scanner scanner = new Scanner(System.in);
String wejscie = scanner.nextLine();
int liczba = scanner.nextInt();


Nazwa	Co to robi?	Wymagania/importy
setTime(...)	Ustawia czas zegara na konkretnÄ… godzinÄ™, minutÄ™ i sekundÄ™. MoÅ¼e zawieraÄ‡ walidacjÄ™ zakresÃ³w.	WÅ‚asna metoda
parseFile(...)	Wczytuje dane z pliku (np. CSV), przetwarza linia po linii i zwraca np. listÄ™/MapÄ™ obiektÃ³w.	import java.io.* + metody plikowe
setCurrentTime()	Ustawia czas na aktualny systemowy (LocalTime.now())	import java.time.LocalTime
toSvg()	Zwraca napis zawierajÄ…cy kod SVG do narysowania np. tarczy zegara lub wskazÃ³wki.	import java.io.* jeÅ›li zapis do pliku
localMeanTime()	Oblicza lokalny czas miejscowy na podstawie dÅ‚ugoÅ›ci geograficznej miasta.	import java.time.LocalTime + obliczenia
generateAnalogClocksSvg(...)	Tworzy pliki SVG z tarczami zegarÃ³w dla listy miast, kaÅ¼dy z aktualnym czasem.	import java.io.*, List<City>
enum	Definiuje zbiÃ³r staÅ‚ych wartoÅ›ci (np. HOUR12, HOUR24). Stosowany do przeÅ‚Ä…cznikÃ³w i opcji.	WÅ‚asna definicja, np.: enum Mode { HOUR12, HOUR24 }
try-catch	ObsÅ‚uguje wyjÄ…tki (bÅ‚Ä™dy w czasie dziaÅ‚ania programu), np. podczas czytania pliku.	import java.io.IOException, Exception
List<T>	Dynamiczna lista (np. ArrayList), przechowuje wiele obiektÃ³w w kolejnoÅ›ci.	import java.util.List, ArrayList
Map<K, V>	SÅ‚ownik, przechowuje dane jako pary kluczâ€“wartoÅ›Ä‡, np. "Warszawa" â†’ City	import java.util.Map, HashMap
LocalTime	Klasa reprezentujÄ…ca czas (godzina:minuta:sekunda) bez daty.	import java.time.LocalTime
BufferedReader / FileReader	Klasy do czytania plikÃ³w tekstowych linia po linii.	import java.io.*
